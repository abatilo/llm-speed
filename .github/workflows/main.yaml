name: 'Run tests'
on:
  push:
    branches:
      - main

jobs:
  list-targets:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.targets.outputs.targets }}
    steps:
      - id: targets
        run: |
          targets="
          gpt3turbo
          gpt4turbo
          "
          # Convert the multiline string into a JSON array
          json_array=$(echo "$targets" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          # Create a JSON object with the key "targets"
          json_object=$(jq -c -n --argjson arr "$json_array" '{"target": $arr}')

          echo "targets=${json_object}" >> "$GITHUB_OUTPUT"
  run:
    needs: [list-targets]
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.list-targets.outputs.targets) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Execute test
        uses: grafana/k6-action@v0.3.0
        env:
          TARGET: ${{ matrix.target }}
          OPENAI_SECRET_KEY: ${{ secrets.OPENAI_SECRET_KEY }}
        with:
          filename: main.js

      - id: sanitize-name
        run: |
          name="$(echo '${{ matrix.target }}' | sed 's/[^a-zA-Z0-9]/_/g')"
          echo "${name}"
          echo "name=${name}" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.sanitize-name.outputs.name }}
          path: ${{ steps.sanitize-name.outputs.name }}.html

  publish:
    needs: [list-targets, run]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    steps:
      - uses: actions/download-artifact@v3

      - name: Collect benchmarks
        shell: python
        run: |
          import datetime
          import os
          import shutil

          def find_html_files(root_dir, destination_dir):
              html_files = []
              for root, dirs, files in os.walk(root_dir):
                  for file in files:
                      if file.endswith('.html'):
                          html_files.append(os.path.join(root, file))
              return html_files

          def move_files(files, destination_dir):
              for file in files:
                  shutil.move(file, destination_dir)

          def delete_folders(root_dir):
              for root, dirs, _ in os.walk(root_dir, topdown=False):
                  for dir in dirs:
                      dir_path = os.path.join(root, dir)
                      if not os.listdir(dir_path):  # check if directory is empty
                          os.rmdir(dir_path)

          def create_index_html(files, destination_dir):
              with open(os.path.join(destination_dir, 'index.html'), 'w') as index_file:
                  # Start of HTML and head section with styles
                  index_file.write('<!DOCTYPE html>\n<html>\n<head>\n')
                  index_file.write('<style>\n')
                  index_file.write('body {\n')
                  index_file.write("    font-family: 'Arial', sans-serif;\n")
                  index_file.write("    background-color: #E0F7FA;\n")
                  index_file.write("    color: #0277BD;\n")
                  index_file.write("    padding: 20px;\n}\n")
                  index_file.write('.container {\n')
                  index_file.write("    max-width: 800px;\n")
                  index_file.write("    margin: auto;\n}\n")
                  index_file.write('h1 {\n')
                  index_file.write("    text-align: center;\n}\n")
                  index_file.write('ul {\n')
                  index_file.write("    list-style-type: none;\n")
                  index_file.write("    padding: 0;\n}\n")
                  index_file.write('li {\n')
                  index_file.write("    margin: 10px 0;\n")
                  index_file.write("    padding: 10px;\n")
                  index_file.write("    background-color: #B3E5FC;\n")
                  index_file.write("    border-radius: 8px;\n")
                  index_file.write("    transition: background-color 0.3s;\n}\n")
                  index_file.write('li:hover {\n')
                  index_file.write("    background-color: #81D4FA;\n}\n")
                  index_file.write('a {\n')
                  index_file.write("    text-decoration: none;\n")
                  index_file.write("    color: #01579B;\n}\n")
                  index_file.write('a:hover {\n')
                  index_file.write("    color: #0288D1;\n}\n")
                  index_file.write('</style>\n</head>\n')

                  # Body section
                  index_file.write('<body>\n<div class="container">\n')
                  index_file.write('<h1>List of Benchmarks</h1>\n')
                  index_file.write('''
                      <p>
                        This page has benchmarks that were automatically generated by <a
                          href="https://github.com/abatilo/llm-speed">abatilo/llm-speed</a>.
                      </p>
                  ''')
                  index_file.write('<ul>\n')

                  for file in files:
                      file_name = os.path.basename(file)
                      index_file.write(f'<a href="{file_name}"><li>{file_name.removesuffix(".html")}</li></a>\n')

                  index_file.write('</ul>\n')

                  formatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')
                  index_file.write(f'''
                      <p>
                          Last updated on {formatted_datetime} UTC.
                      </p>
                  ''')
                  index_file.write('</div>\n')
                  index_file.write('</body></html>')

          def main():
              root_dir = '.'  # start search from the current directory
              destination_dir = os.getcwd()  # current directory

              html_files = find_html_files(root_dir, destination_dir)
              move_files(html_files, destination_dir)
              delete_folders(root_dir)
              create_index_html(html_files, destination_dir)

          if __name__ == '__main__':
              main()

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'
      - name: Deploy artifact
        id: deployment
        uses: actions/deploy-pages@v2
